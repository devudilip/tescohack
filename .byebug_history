continue
"Asdsad".upcase
message['type'].to_upcase
message['type'].to_uppercase
message['type']
message['payload']
message
continue
str.include?("Dave")
str.include?("dave")
str.include?("daves")
str.include?("dave")
str.methods
str.class
str.find
str
msg
continue
message['action']
message['payload']['elements']
message
continue
JSON.parse(params['value'])['payload']['elements']
JSON.parse(params['value'])['payload'].class
JSON.parse(params['value'])['payload']
JSON.parse(params['value'])
JSON.parse(params['value'])["user"]
JSON.parse(params['value'])["type"]
JSON.parse(params['value'])['title']
JSON.parse(params['value']).class
JSON.parse(params['value'])
params['value']
params['value'].class
params['value']
params['value'].to_json.class
params['value'].to_json.clas
params['value'].to_json
params['value'].class
params['value']
params
continue
params[:value].to_a
params[:value].to_array
params[:value]
params
params[:value]
params[:value].to_s
params[:value]
params[:value].to_a
params[:value].class
params[:value]
params
continue
response.body
response.body.first
response.body.first.last["message"]
response.body.first.last
response.body.first
response.body
response.body.class
response.body[0]
response.body[1]
response.body.first
response.body
response.body.last
response.body.first
response.body.count
response.body.class
response.body
response
